// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Split a string using the specified split parameter
 * When the split parameter is an empty string, each list item will contain a single character.
 * @param {string} inputString
 * @param {string} splitParameter
 * @returns {Promise.<MxObject[]>}
 */
export async function StringSplit(inputString, splitParameter) {
	// BEGIN USER CODE

	return new Promise((resolve, reject) => {
		if (splitParameter === undefined || splitParameter === null) {
			return reject(new Error("StringSplit: splitParameter must not be empty"));
		}
		if (!inputString) {
			return resolve(undefined);
		}
		const splitArray = inputString.split(splitParameter);
		result = [];
		for (let i = 0; i < splitArray.length; i++) {
			const splitItem = splitArray[i];
			createMxObject("NanoflowCommonsITvisors.SplitItem").then(mxObj => {
				mxObj.set("Index", i);
				mxObj.set("Value", splitItem);
				result.push(mxObj);
			});
		}
		return resolve(result);
	});

	async function createMxObject(entityName) {
		return new Promise((resolve, reject) => {
			mx.data.create({
				entity: entityName,
				callback:  (mxObject) => {
					resolve(mxObject);
				},
				error: (e) => {
					reject("Could not create '" + entityName + "': " + e.message);
				}
			});

		});
	}

	// END USER CODE
}
