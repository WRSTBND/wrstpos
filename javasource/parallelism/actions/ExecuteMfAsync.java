// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package parallelism.actions;

import java.util.UUID;
import java.util.concurrent.Future;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import parallelism.implementation.Parallelism;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * This will start a microflow in background, having a Future reference.
 * It will NOT start a transaction, and is specifically suitable to execute tasks which don't involve any database interaction.
 * 
 */
public class ExecuteMfAsync extends CustomJavaAction<IMendixObject>
{
	private java.lang.String microflow;
	private IMendixObject argument;

	public ExecuteMfAsync(IContext context, java.lang.String microflow, IMendixObject argument)
	{
		super(context);
		this.microflow = microflow;
		this.argument = argument;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext newContext = getContext().getSession().createContext();
		
		Future<Object> future = Core.executeAsync(newContext, this.microflow, argument);
		String uuid = UUID.randomUUID().toString();
		
		Parallelism.getFutures(getContext()).put(uuid, future); 
		
		parallelism.proxies.Future mxFuture = new parallelism.proxies.Future(getContext());
		mxFuture.setReference(uuid);
		return mxFuture.getMendixObject(); 
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteMfAsync";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
